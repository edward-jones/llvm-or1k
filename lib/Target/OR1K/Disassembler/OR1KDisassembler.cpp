//===-- OR1KDisassembler.cpp - Disassembler for OR1K ------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file is part of the OR1K Disassembler.
//
//===----------------------------------------------------------------------===//

#include "OR1K.h"
#include "OR1KDisassembler.h"
#include "OR1KRegisterInfo.h"
#include "OR1KSubtarget.h"
#include "llvm/MC/MCDisassembler.h"
#include "llvm/MC/MCFixedLenDisassembler.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/MemoryObject.h"
#include "llvm/Support/TargetRegistry.h"

#define DEBUG_TYPE "or1k-disassembler"

using namespace llvm;

typedef MCDisassembler::DecodeStatus DecodeStatus;

namespace llvm {
extern Target TheOR1KbeTarget;
extern Target TheOR1KleTarget;
}

static MCDisassembler *createOR1KbeDisassembler(const Target &T,
                                                const MCSubtargetInfo &STI,
                                                MCContext &Ctx) {
  return new OR1KDisassembler(STI, Ctx, false);
}

static MCDisassembler *createOR1KleDisassembler(const Target &T,
                                                const MCSubtargetInfo &STI,
                                                MCContext &Ctx) {
  return new OR1KDisassembler(STI, Ctx, true);
}

extern "C" void LLVMInitializeOR1KDisassembler() {
  // Register the disassembler
  TargetRegistry::RegisterMCDisassembler(TheOR1KbeTarget,
                                         createOR1KbeDisassembler);

  TargetRegistry::RegisterMCDisassembler(TheOR1KleTarget,
                                         createOR1KleDisassembler);
}

// Forward declare because the autogenerated code will reference this.
// Definition is further down.
DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, unsigned RegNo,
                                    uint64_t Address, const void *Decoder);

static DecodeStatus DecodeMemoryValue(MCInst &Inst, unsigned Insn,
                                      uint64_t Address, const void *Decoder);

#include "OR1KGenDisassemblerTables.inc"

static DecodeStatus readInstruction32(const MemoryObject &region,
                                      bool IsLittleEndian, uint64_t address,
                                      uint64_t &size, uint32_t &insn) {
  uint8_t Bytes[4];

  // We want to read exactly 4 bytes of data.
  if (region.readBytes(address, 4, (uint8_t *)Bytes) == -1) {
    size = 0;
    return MCDisassembler::Fail;
  }

  if (IsLittleEndian)
    insn =
        (Bytes[3] << 24) | (Bytes[2] << 16) | (Bytes[1] << 8) | (Bytes[0] << 0);
  else
    insn =
        (Bytes[0] << 24) | (Bytes[1] << 16) | (Bytes[2] << 8) | (Bytes[3] << 0);

  return MCDisassembler::Success;
}

DecodeStatus OR1KDisassembler::getInstruction(MCInst &instr, uint64_t &Size,
                                              const MemoryObject &Region,
                                              uint64_t Address,
                                              raw_ostream &vStream,
                                              raw_ostream &cStream) const {
  uint32_t Insn;

  DecodeStatus Result =
      readInstruction32(Region, IsLittleEndian, Address, Size, Insn);

  if (Result == MCDisassembler::Fail)
    return MCDisassembler::Fail;

  // Call auto-generated decoder function
  Result =
      decodeInstruction(DecoderTableOR1K32, instr, Insn, Address, this, STI);
  if (Result != MCDisassembler::Fail) {
    Size = 4;
    return Result;
  }

  return MCDisassembler::Fail;
}

static const unsigned OR1kRegs[] = {
    OR1K::R0,  OR1K::R1,  OR1K::R2,  OR1K::R3,  OR1K::R4,  OR1K::R5,  OR1K::R6,
    OR1K::R7,  OR1K::R8,  OR1K::R9,  OR1K::R10, OR1K::R11, OR1K::R12, OR1K::R13,
    OR1K::R14, OR1K::R15, OR1K::R16, OR1K::R17, OR1K::R18, OR1K::R19, OR1K::R20,
    OR1K::R21, OR1K::R22, OR1K::R23, OR1K::R24, OR1K::R25, OR1K::R26, OR1K::R27,
    OR1K::R28, OR1K::R29, OR1K::R30, OR1K::R31};

template <std::size_t N>
static DecodeStatus decodeRegisterClass(MCInst &Inst, uint64_t RegNo,
                                        const unsigned (&Regs)[N]) {
  assert(RegNo < N && "Invalid register number");
  Inst.addOperand(MCOperand::CreateReg(Regs[RegNo]));
  return MCDisassembler::Success;
}

DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, unsigned RegNo,
                                    uint64_t Address, const void *Decoder) {
  return decodeRegisterClass(Inst, RegNo, OR1kRegs);
}

static DecodeStatus DecodeMemoryValue(MCInst &Inst, unsigned Insn,
                                      uint64_t Address, const void *Decoder) {
  unsigned RegNo = (Insn >> 16) & 0x1F;
  decodeRegisterClass(Inst, RegNo, OR1kRegs);
  unsigned Offset = (Insn & 0xffff);
  Inst.addOperand(MCOperand::CreateImm(SignExtend32<16>(Offset)));
  return MCDisassembler::Success;
}
